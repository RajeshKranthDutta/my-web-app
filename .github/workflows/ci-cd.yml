name: CI/CD Pipeline for AKS

on:
  push:
    branches:
      - master  # Or any branch you want to trigger the pipeline for

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      # Step 1: Check out the code from GitHub
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up Docker and build the Docker image
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build Docker image
        run: |
          docker build -t k8steamcontainerregistry.azurecr.io/my-web-app:$GITHUB_SHA .

      # Step 3: Log in to Azure using Managed Identity (for AKS and ACR)
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          identity: true  # Using Managed Identity for AKS & ACR

      # Step 4: Log in to Azure Container Registry (ACR)
      - name: Log in to ACR
        run: |
          az acr login --name k8steamcontainerregistry # Log in to your Azure Container Registry

      # Step 5: Push Docker image to ACR
      - name: Push Docker image to ACR
        run: |
          docker push k8steamcontainerregistry.azurecr.io/my-web-app:$GITHUB_SHA

      # Step 6: Set up kubectl to interact with AKS
      - name: Set up kubectl
        run: |
          az aks get-credentials --resource-group gpuk8srg --name k8s4gpu

      # Step 7: Deploy the app to AKS using kubectl
      - name: Deploy to AKS
        run: |
          kubectl set image deployment/my-web-app my-web-app=k8steamcontainerregistry.azurecr.io/my-web-app:$GITHUB_SHA
          kubectl rollout status deployment/my-web-app